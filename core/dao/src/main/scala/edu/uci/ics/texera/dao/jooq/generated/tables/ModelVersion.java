/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.ModelVersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelVersion extends TableImpl<ModelVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.model_version</code>
     */
    public static final ModelVersion MODEL_VERSION = new ModelVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelVersionRecord> getRecordType() {
        return ModelVersionRecord.class;
    }

    /**
     * The column <code>texera_db.model_version.mvid</code>.
     */
    public final TableField<ModelVersionRecord, Integer> MVID = createField(DSL.name("mvid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.model_version.mid</code>.
     */
    public final TableField<ModelVersionRecord, Integer> MID = createField(DSL.name("mid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.model_version.creator_uid</code>.
     */
    public final TableField<ModelVersionRecord, Integer> CREATOR_UID = createField(DSL.name("creator_uid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.model_version.name</code>.
     */
    public final TableField<ModelVersionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>texera_db.model_version.version_hash</code>.
     */
    public final TableField<ModelVersionRecord, String> VERSION_HASH = createField(DSL.name("version_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>texera_db.model_version.creation_time</code>.
     */
    public final TableField<ModelVersionRecord, Timestamp> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.model_version</code> table reference
     */
    public ModelVersion(String alias) {
        this(DSL.name(alias), MODEL_VERSION);
    }

    /**
     * Create an aliased <code>texera_db.model_version</code> table reference
     */
    public ModelVersion(Name alias) {
        this(alias, MODEL_VERSION);
    }

    /**
     * Create a <code>texera_db.model_version</code> table reference
     */
    public ModelVersion() {
        this(DSL.name("model_version"), null);
    }

    public <O extends Record> ModelVersion(Table<O> child, ForeignKey<O, ModelVersionRecord> key) {
        super(child, key, MODEL_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public Identity<ModelVersionRecord, Integer> getIdentity() {
        return (Identity<ModelVersionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModelVersionRecord> getPrimaryKey() {
        return Keys.MODEL_VERSION_PKEY;
    }

    @Override
    public List<ForeignKey<ModelVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODEL_VERSION__MODEL_VERSION_MID_FKEY);
    }

    private transient Model _model;

    /**
     * Get the implicit join path to the <code>texera_db.model</code> table.
     */
    public Model model() {
        if (_model == null)
            _model = new Model(this, Keys.MODEL_VERSION__MODEL_VERSION_MID_FKEY);

        return _model;
    }

    @Override
    public ModelVersion as(String alias) {
        return new ModelVersion(DSL.name(alias), this);
    }

    @Override
    public ModelVersion as(Name alias) {
        return new ModelVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(String name) {
        return new ModelVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(Name name) {
        return new ModelVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String, String, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
